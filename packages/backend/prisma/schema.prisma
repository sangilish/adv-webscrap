// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // SaaS 관련 필드
  plan      String   @default("FREE") // "FREE", "PRO", "ENTERPRISE"
  freeAnalysisCount Int @default(0) // 무료 분석 사용 횟수 (월별 리셋)
  subscriptionType  String @default("free") // "free", "pro"
  subscriptionEndsAt DateTime?
  lastResetDate DateTime @default(now()) // 마지막 월별 리셋 날짜
  
  // 크레딧 시스템
  credits   Int @default(0) // 현재 보유 크레딧 (10페이지 = 1달러 = 100크레딧, 1페이지 = 10크레딧)
  totalCreditsEarned Int @default(0) // 총 구매한 크레딧
  totalCreditsUsed   Int @default(0) // 총 사용한 크레딧
  
  // 관계
  analyses  Analysis[]
  payments  Payment[]
  downloads Download[]
  creditTransactions CreditTransaction[]
  
  @@map("users")
}

model Analysis {
  id          String   @id @default(cuid())
  userId      Int
  url         String
  title       String?
  status      String   @default("pending") // "pending", "running", "completed", "failed"
  progress    Int      @default(0) // 0-100 진행률 표시
  pageCount   Int      @default(0)
  resultData  String?  // JSON 형태로 저장
  screenshotPath String?
  htmlPath    String?
  creditsUsed Int      @default(0) // 이 분석에서 사용된 크레딧
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 관계
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  downloads   Download[]
  
  @@map("analyses")
}

model Payment {
  id              String   @id @default(cuid())
  userId          Int
  stripeSessionId String   @unique
  amount          Int      // 센트 단위 (USD)
  currency        String   @default("USD")
  status          String   @default("pending") // "pending", "completed", "failed"
  type            String   // "credits", "subscription"
  description     String?
  creditsGranted  Int      @default(0) // 이 결제로 제공된 크레딧 수
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // 관계
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      Int
  type        String   // "purchase", "usage", "refund", "bonus"
  amount      Int      // 양수: 크레딧 증가, 음수: 크레딧 감소
  balanceAfter Int     // 거래 후 잔액
  description String?
  paymentId   String?  // Payment와 연결 (선택사항)
  analysisId  String?  // Analysis와 연결 (선택사항)
  createdAt   DateTime @default(now())
  
  // 관계
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("credit_transactions")
}

model Download {
  id         String   @id @default(cuid())
  userId     Int
  analysisId String
  fileType   String   // "png", "html", "json"
  filePath   String
  createdAt  DateTime @default(now())
  
  // 관계
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis   Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  @@map("downloads")
}
